// 请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。
//
// 现有一个链表 --?head =?[4,5,1,9]，它可以表示为:
//      4 -> 5 -> 1 -> 9
//
// 示例 1:
// 输入: head = [4,5,1,9], node = 5
// 输出: [4,1,9]
// 解释: 给定你链表中值为?5?的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.
//
// 示例 2:
// 输入: head = [4,5,1,9], node = 1
// 输出: [4,5,9]
// 解释: 给定你链表中值为?1?的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.
//
// 说明:
// 链表至少包含两个节点。
// 链表中所有节点的值都是唯一的。
// 给定的节点为非末尾节点并且一定是链表中的一个有效节点。
// 不要从你的函数中返回任何结果。

#include<iostream>
using namespace std;
//Definition for singly-linked list.
 struct ListNode {
     int val;
     ListNode *next;
     ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    void deleteNode(ListNode* node) 
    {
        ListNode *p = node;
        while(node->next)
        {
            node->val = node->next->val;
            p = node;
            node = node->next;
        }
        p->next = NULL;
        node = NULL;
    }
};


int main()
{
    ListNode *head = new ListNode(4);
    head->next = new ListNode(5);
    head->next->next = new ListNode(1);
    head->next->next->next = new ListNode(9);
    Solution s;
    s.deleteNode(head->next->next);
    while (head)
    {
        cout<<head->val<<" ";
        head = head->next;
    }
    system("pause");
    return 0;
}